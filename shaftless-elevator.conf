# This is a file describing a standard autoconfiguration, do not edit.
# See custom/sample.conf for a more generic template and explanation on the syntax.

name: Shaftless Space Elevator

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    rocketfueltank:
        class: RocketFuelContainer
        select: all
    gyro:
        class: GyroUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    button:
        class: ManualButtonUnit
        select: manual
    screen:
        class: ScreenUnit
        select: manual

handlers:
    unit:
        start:
            lua: |
                --system.print(unit.getData())
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                brakeInput = 0

                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})
                Nav.axisCommandManager:setTargetGroundAltitude(0)

                -- element widgets
                -- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
                _autoconf.displayCategoryPanel(weapon, weapon_size, L_TEXT("ui_lua_widget_weapon", "Weapons"), "weapon", true)
                core.show()
                _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_periscope", "Periscope"), "periscope")
                placeRadar = true
                if atmofueltank_size > 0 then
                    _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                if spacefueltank_size > 0 then
                    _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"), "fuel_container")
                if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
                    _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                    placeRadar = false
                end
                if antigrav ~= nil then antigrav.show() end
                if warpdrive ~= nil then warpdrive.show() end
                if gyro ~= nil then gyro.show() end

                -- freeze the player in he is remote controlling the construct
                if Nav.control.isRemoteControlled() == 1 then
                    system.freeze(1)
                end

                -- landing gear
                -- make sure every gears are synchonized with the first
                gearExtended = (Nav.control.isAnyLandingGearExtended() == 1) -- make sure it's a lua boolean
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end
                
                -- instead of standard function
                function angle_between(vector1,vector2)
                    return math.acos(utils.clamp(vector1:dot(vector2) / (vector1:len() * vector2:len()),-1,1))
                end
                
                stabPID = pid.new(0.01, 0, 0.1)
                throttlePID = pid.new(0.01, 0, 0.1)
                velocityPID = pid.new(0.01, 0, 0.1)
                
                local position_1_name = "Localtion 1" --export: Position Name
                local position_1_x = -53808 --export: World Position
                local position_1_y = 82068 --export: World Position
                local position_1_z = -47152 --export: World Position
                local position1 = vec3(position_1_x,position_1_y,position_1_z)
                local position_2_name = "Localtion 2" --export: Position Name
                position_2_x = -54455 --export: World Position
                position_2_y = 83088 --export: World Position
                position_2_z = -46205 --export: World Position
                position2 = vec3(position_2_x,position_2_y,position_2_z)
                local position_3_name = "Localtion 3" --export: Position Name
                position_3_x = -53992 --export: World Position
                position_3_y = 82151 --export: World Position
                position_3_z = -47149 --export: World Position
                position3 = vec3(position_3_x,position_3_y,position_3_z)
                
                positions = {position1,position2,position3}
                positionNames = {position_1_name,position_2_name,position_3_name}
                north = vec3({0,0,-1})
                startVertical = vec3(core.getConstructWorldOrientationUp())
                currentPositionIndex = 1
                displayIndex = currentPositionIndex
                changingPositions = false
                stabilizationIsActive = true
                elevatorModeIsActive = false
                startPosition = vec3(core.getConstructWorldPos())
                
                function setControlMasterMode(controlMasterMode)
                    if unit.getControlMasterModeId() ~= controlMasterMode then
                        unit.cancelCurrentControlMasterMode()
                        Nav.axisCommandManager:setMasterMode(controlMasterMode)
                    end        
                end
                
                --setControlMasterMode(controlMasterModeId.cruise)
                
                function nextPosition()
                    if currentPositionIndex < #positions then
                        currentPositionIndex = currentPositionIndex + 1
                        changingPositions = true
                        if gearExtended then
                            Nav.control.retractLandingGears()
                        end
                    end
                end
                
                function prevPosition()
                    if currentPositionIndex > 1 then
                        currentPositionIndex = currentPositionIndex - 1
                        changingPositions = true
                        if gearExtended then
                            Nav.control.retractLandingGears()
                        end
                    end
                end
                
                function executeDisplayPosition()
                    currentPositionIndex = displayIndex
                    changingPositions = true
                    if gearExtended then
                        Nav.control.retractLandingGears()
                    end
                end
                
                function getDistanceDisplayString(distance)
                    if distance > 100000 then
                        -- Convert to SU
                        return utils.round(distance/1000/200,1) .. " SU"
                    elseif distance < 1000 then
                        return utils.round(distance,1) .. " M"
                    else
                        -- Convert to KM
                        return utils.round(distance/1000,1) .. " KM"
                    end
                end
                
        stop:
            lua: |
                _autoconf.hideCategoryPanels()
                if antigrav ~= nil then antigrav.hide() end
                if warpdrive ~= nil then warpdrive.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()
                Nav.control.switchOffHeadlights()

    screen_1:
        mouseDown(x,y):
            lua: |
                local convertedX = x * 1024
                local convertedY = y * 612
                local ButtonPadding = 4
                local ButtonX = ButtonPadding
                local ButtonY = 105
                local ButtonWidth = 1024 - ButtonPadding
                local ButtonHeight = 35
                
                for k,v in pairs(positions) do
                    local buttonX = ButtonX
                    local buttonY = ButtonY + (#positions-k)*(ButtonHeight+ButtonPadding)
                    
                    local selected = (k == currentPositionIndex)
                    if not selected then
                        if convertedX > buttonX and convertedX < buttonX + ButtonWidth and convertedY > buttonY and convertedY < buttonY + ButtonHeight then
                            displayIndex = k
                        end
                    end
                end
                
                if convertedY < 95 and currentPositionIndex ~= displayIndex then
                    executeDisplayPosition()
                end


    system:
        flush:
            lua: |
                -- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu

                local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
                local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01

                local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
                local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local torqueFactor = 2 --export: Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                
                local angularVelocityThreshold = 0.01  --export: criteria for stabilization
                local angleThreshold = 0.5  --export: minimum allowed deviation
                local throttleForceFactor = 100  --export: throttle force factor
                --local horizontalVeocityLimit = 100 --export
                --local verticalVelocityLimit = 1000 --export
                local maxVelocity = 1000 --export
                local yawRotationInput = 0 -- export: set yaw rotation speed is required

                -- validate params
                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)

                -- final inputs
                local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + system.getControlDeviceYawInput()
                local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput

                -- Axis    
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                if worldVertical:len() < 0.1 then
                    worldVertical = startVertical -- Use our stored one if in space
                end

                local constructUp = vec3(core.getConstructWorldOrientationUp())
                local constructForward = vec3(core.getConstructWorldOrientationForward())
                local constructRight = vec3(core.getConstructWorldOrientationRight())
                local constructVelocity = vec3(core.getWorldVelocity())
                local constructVelocityDir = vec3(core.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)

                -- STABILIZATION CODE
                if stabilizationIsActive then
                    if currentRollDegAbs > angleThreshold then
                        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);
                        stabPID:inject(targetRollDeg - currentRollDeg)
                        finalRollInput = stabPID:get() * rollSpeedFactor
                    else
                        finalRollInput = 0
                    end
                    
                    local currentPitchDeg = angle_between(worldVertical,constructForward) * constants.rad2deg - 90
                    local currentPitchDegAbs = math.abs(currentPitchDeg)
                    
                    if currentPitchDegAbs > angleThreshold then
                        local targetPitchDeg = utils.clamp(0,currentPitchDegAbs-30, currentPitchDegAbs+30);
                        stabPID:inject(targetPitchDeg - currentPitchDeg)
                        finalPitchInput = stabPID:get() * pitchSpeedFactor
                    else
                        finalPitchInput = 0
                    end
                    
                    if elevatorModeIsActive then
                        if yawRotationInput == 0 then
                            local currentYawDeg = getRoll(north, constructUp, constructRight)
                            local currentYawDegAbs = math.abs(currentYawDeg)
                            
                            if currentRollDegAbs < angleThreshold and currentPitchDegAbs < angleThreshold and currentYawDegAbs > angleThreshold then
                                local targetYawDeg = utils.clamp(0,currentYawDegAbs-30, currentYawDegAbs+30);
                                stabPID:inject(targetYawDeg - currentYawDeg)
                                finalYawInput = stabPID:get() * yawSpeedFactor
                            else
                                finalYawInput = 0
                            end
                        else
                            finalYawInput = yawRotationInput
                        end
                    end
                end
                -- END STABILIZATION CODE

                -- Rotation
                local constructAngularVelocity = vec3(core.getWorldAngularVelocity())
                local targetAngularVelocityPitchAndRoll = finalPitchInput * pitchSpeedFactor * constructRight
                                                + finalRollInput * rollSpeedFactor * constructForward
                local targetAngularVelocity = targetAngularVelocityPitchAndRoll +
                                                + finalYawInput * yawSpeedFactor * constructUp
                
                local constructStabilized = false
                if yawRotationInput == 0 and constructAngularVelocity:len() < angularVelocityThreshold and targetAngularVelocity:len() < angularVelocityThreshold
                        or yawRotationInput ~= 0 and constructAngularVelocity:dot(constructRight) < angularVelocityThreshold and constructAngularVelocity:dot(constructForward) < angularVelocityThreshold and targetAngularVelocityPitchAndRoll:len() < angularVelocityThreshold
                        then
                    constructStabilized = true
                end
                
                -- Engine commands
                local keepCollinearity = 1 -- for easier reading
                local dontKeepCollinearity = 0 -- for easier reading
                local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities
                
                local kinematic = core.getMaxKinematicsParametersAlongAxis('analog', core.getConstructOrientationRight())
                local atmoRangeFMaxPlus = kinematic[1]
                local atmoRangeFMaxMinus = kinematic[2]
                local spaceRangeFMaxPlus = kinematic[3]
                local spaceRangeFMaxMinus = kinematic[4]
                --system.print("ap=".. atmoRangeFMaxPlus .." am=".. atmoRangeFMaxMinus .." sp=".. spaceRangeFMaxPlus .."  sm=".. spaceRangeFMaxMinus)
                if elevatorModeIsActive then

                    local position = positions[currentPositionIndex]
                    
                    local constructPosition = vec3(core.getConstructWorldPos())

                    local distance_from_start = 0 --export: How far from initial position start horizontal movement
                    local horizontalMovementAllowed = (constructPosition - startPosition):len() > distance_from_start
                    
                    local distanceToPositionVect = position and vec3(position - constructPosition) or vec3(1,0,0)

                    --distanceToPos = constructPosition:dist(position)
                    distanceToPos = distanceToPositionVect:len()
                    
                    local verticalStrafeEngineTags = 'thrust analog vertical'
                    local lateralStrafeEngineTags = 'thrust analog lateral'
                    local longitudinalEngineTags = 'thrust analog longitudinal'
                    local priority1 = ''
                    local priority2 = ''
                    local priority3 = ''
                    local useBrake = false
                    
                    local totalEngineTags =  lateralStrafeEngineTags.. ' , ' .. longitudinalEngineTags.. ' , ' .. verticalStrafeEngineTags
                    
                    local gravity = core.g() * worldVertical:normalize()
                    local requiredAcceleration = -gravity
                    
                    if distanceToPos < 0.5 then
                        if not gearExtended then
                            Nav.control.extendLandingGears()
                            gearExtended = true
                        end
                        changingPositions = false
                        useBrake = true
                        priority1 = 'brake'
                        totalEngineTags = totalEngineTags..', brake'

                    elseif constructStabilized and position then
                        changingPositions = true
                        
                        local constructMass = core.getConstructMass()
                        
                        local newMaxBrake = json.decode(unit.getData()).maxBrake
                        if newMaxBrake ~= nil then
                            maxBrake = newMaxBrake
                        end
                        
                        local maxBrakeAcceleration = maxBrake and maxBrake / constructMass or 0

                        local constructVelocityUp = constructVelocity:dot(constructUp)
                        local constructVelocityRight = constructVelocity:dot(constructRight)
                        local constructVelocityForward = constructVelocity:dot(constructForward)
                        

                        local gravityUp = gravity:dot(constructUp)
                        local gravityRight = gravity:dot(constructRight)
                        local gravityForward = gravity:dot(constructForward)
                        
                        local kinematicUp = core.getMaxKinematicsParametersAlongAxis('analog', core.getConstructOrientationUp())
                        local maxThrustUp = kinematicUp[1]+kinematicUp[3]
                        local maxAccelerationUp = maxThrustUp / constructMass  + gravityUp
                        local maxThrustDown = kinematicUp[2]+kinematicUp[4]
                        local maxAccelerationDown = -maxThrustDown / constructMass - gravityUp
                        
                        local kinematicRight = core.getMaxKinematicsParametersAlongAxis('analog', core.getConstructOrientationRight())
                        local maxThrustRight = kinematicRight[1]+kinematicRight[3]
                        local maxAccelerationRight = maxThrustRight / constructMass + gravityRight
                        local maxThrustLeft = kinematicRight[2]+kinematicRight[4]
                        local maxAccelerationLeft = -maxThrustLeft / constructMass - gravityRight
                        
                        local kinematicForward = core.getMaxKinematicsParametersAlongAxis('analog', core.getConstructOrientationForward())
                        local maxThrustForward = kinematicForward[1]+kinematicForward[3]
                        local maxAccelerationForward = maxThrustForward / constructMass + gravityForward
                        local maxThrustBack = kinematicForward[2]+kinematicForward[4]
                        local maxAccelerationBack = -maxThrustBack / constructMass - gravityForward
                        
                        local function getVelocity(distance, maxAccelerationPos, maxAccelerationNeg)
                            local acceleration = maxAccelerationPos
                            if distance > 0 then
                                acceleration = maxAccelerationNeg
                            end
                            return utils.sign(distance) * math.sqrt(math.abs(distance * 2 * acceleration)) / 2 -- has taken 2 time less (temporary)
                        end
                        
                        local distanceUp = distanceToPositionVect:dot(constructUp)
                        local requiredVelocityUp = getVelocity(distanceUp,maxAccelerationUp,maxAccelerationDown)

                        --system.print("acUp="..math.floor(maxThrustUp / constructMass*100)/100)
                        local distanceRight = distanceToPositionVect:dot(constructRight)
                        local requiredVelocityRight = getVelocity(distanceRight,maxAccelerationRight,maxAccelerationLeft)
                        
                        local distanceForward = distanceToPositionVect:dot(constructForward)
                        local requiredVelocityForward = getVelocity(distanceForward,maxAccelerationForward,maxAccelerationBack)

                        local requiredVelocity = requiredVelocityUp*constructUp + requiredVelocityRight*constructRight + requiredVelocityForward*constructForward
                        
                        local maxVelocity = 1000 -- export: max velocity km/h
                        
                        if (requiredVelocity:len() > maxVelocity / 3.6) then -- limit velocity by 1000km/h
                            requiredVelocity = maxVelocity / 3.6 * requiredVelocity:normalize()
                        end
                        
                        --if (requiredVelocity:len() > distanceToPos / 3.6) then -- limit velocity if it's close to destination
                        --    requiredVelocity = distanceToPos / 3.6 * requiredVelocity:normalize()
                        --end
                        
                        local deltaVelocity = requiredVelocity - constructVelocity
                        
                        local deltaVelocityForward = deltaVelocity:dot(constructForward)
                        local deltaVelocityRight = deltaVelocity:dot(constructRight)
                        local deltaVelocityUp = deltaVelocity:dot(constructUp)
                        
                        local kForward = deltaVelocityForward > 1 and 1000 or 1 -- if delta is significant, set max acceleration
                        local kRight = deltaVelocityRight > 1 and 1000 or 1
                        local kUp = deltaVelocityUp > 1 and 1000 or 1

                        -- squared velocity
                        local accelerationForward = deltaVelocityForward * kForward * constructForward
                        local accelerationRight = deltaVelocityRight * kRight * constructRight
                        local accelerationUp = deltaVelocityUp * kUp * constructUp
                        --system.print("dv=" .. math.floor(deltaVelocityUp*100)/100 .. " a=" .. math.floor(accelerationUp:len()*100)/100)
                        local acceleration = accelerationUp
                        
                        if horizontalMovementAllowed then --to fly on safe distance up or down from initial point
                            acceleration = acceleration + accelerationForward + accelerationRight
                        end
                        ---[[
                        system.print(" max="..math.floor(maxAccelerationUp*100)/100
                            .." dUp="..math.floor(distanceUp*100)/100
                            .." vUp="..math.floor(requiredVelocityUp*100)/100
                            .." dvUp="..math.floor(deltaVelocityUp*100)/100
                            .." aUp="..math.floor(accelerationUp:len()*100)/100
                            )--]]

                        requiredAcceleration = requiredAcceleration + acceleration
                        
                        if constructVelocityUp < -1 and math.abs(requiredVelocity:dot(constructForward)) < 3 and math.abs(requiredVelocity:dot(constructRight)) < 3 then
                            -- use brake if go down and no need significant horizontal corection
                            priority1 = 'brake'
                            totalEngineTags = totalEngineTags..', brake'
                        end
                        
                    else -- should fly but not stabilized yet or no assigned position
                        changingPositions = false
                        useBrake = true
                        -- TODO add brake
                    end
                    
                    if not useBrake then -- reset brake
                        Nav:setEngineForceCommand('brake', vec3())
                    end

                    Nav:setEngineForceCommand(totalEngineTags, requiredAcceleration, dontKeepCollinearity, priority1, priority2, priority3, tolerancePercentToSkipOtherPriorities)
                else --elevator mode is off
                    distanceToPos = 1
                    changingPositions = false
                end
                
                -- In atmosphere?
                if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 and not elevatorModeIsActive and not stabilizationIsActive then
                    local autoRollRollThreshold = 1.0
                    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
                    if not elevatorModeIsActive and not stabilizationIsActive and autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                        if (rollPID == nil) then
                            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                        end
                        rollPID:inject(targetRollDeg - currentRollDeg)
                        local autoRollInput = rollPID:get()

                        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                    end
                    local turnAssistRollThreshold = 20.0
                    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
                    if not elevatorModeIsActive and not stabilizationIsActive and turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range

                        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                        local rollVerticalRatio = 0
                        if rescaleRollDegAbs < 90 then
                            rollVerticalRatio = rescaleRollDegAbs / 90
                        elseif rescaleRollDegAbs < 180 then
                            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                        end

                        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio
                    
                        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio
                    
                        targetAngularVelocity = targetAngularVelocity
                                            + turnAssistPitchInput * constructRight
                                            + turnAssistYawInput * constructUp
                    end
                end
                    
                -- Rotation
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)
                    
                
                if not elevatorModeIsActive then
                    -- Brakes
                    local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                    Nav:setEngineForceCommand('brake', brakeAcceleration)
                    -- AutoNavigation regroups all the axis command by 'TargetSpeed'
                    local autoNavigationEngineTags = ''
                    local autoNavigationAcceleration = vec3()
                    local autoNavigationUseBrake = false
                    
                    -- Longitudinal Translation
                    local longitudinalEngineTags = 'thrust analog longitudinal'
                    local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                    if (longitudinalCommandType == axisCommandType.byThrottle) then
                        local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                        Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                    elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                        local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                        autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                        autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                        if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                            Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                        then
                            autoNavigationUseBrake = true
                        end
                    
                    end
                    
                    -- Lateral Translation
                    local lateralStrafeEngineTags = 'thrust analog lateral'
                    local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
                    if (lateralCommandType == axisCommandType.byThrottle) then
                        local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                        Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
                    elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
                        local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
                        autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
                        autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
                    end
                    
                    -- Vertical Translation
                    local verticalStrafeEngineTags = 'thrust analog vertical'
                    local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
                    if (verticalCommandType == axisCommandType.byThrottle) then
                        local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                        Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
                    elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
                        local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
                        autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
                        autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
                    end
                    
                    -- Auto Navigation (Cruise Control)
                    if (autoNavigationAcceleration:len() > constants.epsilon) then
                        if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
                        then
                            --system.print("auto brake ".. autoNavigationAcceleration:len())
                            autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
                        end
                        Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
                    end
                    
                    -- Rockets
                    Nav:setBoosterCommand('rocket_engine')
                end

        update:
            lua: |
                Nav:update()
                local content = "<svg width='100%' height='100%' style='position:absolute;top:0;left:0'  viewBox='0 0 1920 1080'>"
                if screen_1 then
                    content = "<svg class='bootstrap' viewBox='0 0 1024 612'>"
                    content = content .. "<path d='M 0 0 L 194 75 Q 512 95 830 75 L 1024 0' style='stroke:black;opacity:1;stroke-width:3;fill-opacity:0.9;fill:rgb(55,55,55)'/>"
                else
                    content = content .. "<path d='M 700 0 L 740 75 Q 960 95 1180 75 L 1220 0' style='stroke:black;opacity:1;stroke-width:3;fill-opacity:0.9;fill:rgb(55,55,55)'/>"
                end
                local font = "Bank"
                if screen_1 then
                    font = "Calibri"
                end
                content = content .. "<text x='50%' y='20px' style='font-size:22px;fill:white;text-anchor:middle;font-family:" .. font .. "'>Atmo Elevator Control</text>"
                local floorString = positionNames[currentPositionIndex] or "unknown"
                local displayString = positionNames[displayIndex] or "unknown"
                if currentPositionIndex == 1 then
                    floorString = floorString .. " (Ground)"
                elseif currentPositionIndex == #positions then
                    floorString = floorString .. " (Top)"
                end
                if displayIndex == 1 then
                    displayString = displayString .. " (Ground)"
                elseif currentPositionIndex == #positions then
                    displayString = displayString .. " (Top)"
                end
                
                if not changingPositions then
                    content = content .. "<text x='50%' y='35px' style='font-size:18px;fill:lightgray;text-anchor:middle;font-family:" .. font .. "'>Current Level: " .. floorString .. "</text>"
                    if button_3 then
                        if displayIndex ~= currentPositionIndex then
                            content = content .. "<text x='50%' y='48px' style='font-size:18px;fill:KHAKI;text-anchor:middle;font-family:" .. font .. "'>Press To Move To: " .. displayString .. "</text>"
                        else
                            content = content .. "<text x='50%' y='48px' style='font-size:18px;fill:KHAKI;text-anchor:middle;font-family:" .. font .. "'>Use Buttons to Select Floor</text>"
                        end
                    end
                else
                    content = content .. "<text x='50%' y='35px' style='font-size:18px;fill:KHAKI;text-anchor:middle;font-family:" .. font .. "'>Moving To: " .. floorString .. "</text>"
                    content = content .. "<text x='50%' y='48px' style='font-size:16px;fill:orange;text-anchor:middle;font-family:" .. font .. "'>Distance: " .. getDistanceDisplayString(distanceToPos) .. "</text>"
                end
                --if unit.getElementClass() == "ECU" then
                --    content = content .. "<text x='50%' y='60px' style='font-size:18px;fill:darkred;text-anchor:middle;font-family:" .. font .. "'>Activate Controller To Use</text>"
                --else
                    local y = 60
                    if not screen_1 then
                        if button_3 then
                            if displayIndex ~= currentPositionIndex then
                                if displayIndex < #positions then
                                    content = content .. "<text x='50%' y='" .. y .. "' style='font-size:16px;fill:LAVENDER;text-anchor:middle;font-family:" .. font .. "'>Above - " .. positionNames[displayIndex+1] .. "</text>"
                                    y = y + 15
                                end
                                if displayIndex > 1 then
                                    content = content .. "<text x='50%' y='" .. y .. "' style='font-size:16px;fill:LAVENDER;text-anchor:middle;font-family:" .. font .. "'>Below - " .. positionNames[displayIndex-1] .. "</text>"
                                end
                            end
                        else
                            if currentPositionIndex < #positions then
                                content = content .. "<text x='50%' y='" .. y .. "' style='font-size:16px;fill:LAVENDER;text-anchor:middle;font-family:" .. font .. "'>Up - " .. positionNames[currentPositionIndex+1] .. "</text>"
                                y = y + 15
                            end
                            if currentPositionIndex > 1 then
                                content = content .. "<text x='50%' y='" .. y .. "' style='font-size:16px;fill:LAVENDER;text-anchor:middle;font-family:" .. font .. "'>Down - " .. positionNames[currentPositionIndex-1] .. "</text>"
                            end
                        end
                    else
                        y = y + 10
                        if currentPositionIndex ~= displayIndex then
                            content = content .. "<text x='50%' y='" .. y .. "' style='font-size:28px;fill:orange;text-anchor:middle;font-family:" .. font .. "'>Confirm Destination: " .. positionNames[displayIndex] .. "</text>"
                        else
                            content = content .. "<text x='50%' y='" .. y .. "' style='font-size:28px;fill:orange;text-anchor:middle;font-family:" .. font .. "'>Select a Destination</text>"
                        end
                    end
                --end
                if screen_1 then
                    -- Add buttons for the floors
                    local ButtonPadding = 4
                    local ButtonX = ButtonPadding
                    local ButtonY = 105
                    local ButtonWidth = 1024 - ButtonPadding
                    local ButtonHeight = 35
                    local defaultFill = "rgb(39,89,87)"
                    local selectedFill = "rgb(200,200,200)"
                    local defaultFontColor = "white"
                    local selectedFontColor = "black"
                    local displayFill = "orange"
                    
                    for k,v in pairs(positions) do
                        local buttonX = ButtonX
                        local buttonY = ButtonY + (#positions-k)*(ButtonHeight+ButtonPadding)
                        
                        local selected = (k == currentPositionIndex)
                        local selectedDisplay = (k == displayIndex)
                        
                        -- Draw a rectangle for the 'button'
                        content = content .. '<rect width="' .. ButtonWidth .. '" height="' .. ButtonHeight .. '" x="' .. buttonX .. '" y="' .. buttonY .. '" style="fill:'
                        if selected then
                            content = content .. selectedFill
                        elseif selectedDisplay then
                            content = content .. displayFill
                        else
                            content = content.. defaultFill
                        end
                        content = content .. ';stroke-width:1;stroke:white;" />'
                        -- And draw the text
                        content = content .. "<text x='" .. buttonX + ButtonWidth/2 .. "' y='" .. buttonY + ButtonHeight/2 + 4 .. "' font-size='24px' fill='"
                        if selected or selectedDisplay then
                            content = content .. selectedFontColor
                        else
                            content = content.. defaultFontColor
                        end 
                        content = content .. "' text-anchor='middle' font-family='" .. font .. "'>" .. positionNames[k] .. "</text>"
                    end
                end
                content = content .. "</svg>"
                if not screen_1 then
                    system.showScreen(1)
                    system.setScreen(content)
                else
                    screen_1.setHTML(content)
                end

        actionStart:
            args: [option1]
            lua: |
                -- Stabilization
                if not elevatorModeIsActive then
                    if stabilizationIsActive and not elevatorModeIsActive then
                        stabilizationIsActive = false
                        system.print("Stabilization Deactivated")
                    else
                        stabilizationIsActive = true
                        system.print("Stabilization Activated")
                    end
                end

        actionStart:
            args: [option2]
            lua: |
                -- Elevator mode
                if elevatorModeIsActive then
                    elevatorModeIsActive = false
                    Nav:setEngineForceCommand('brake', vec3())
                    system.print("Elevator Deactivated")
                else
                    stabilizationIsActive = true
                    elevatorModeIsActive = true
                    --setControlMasterMode(controlMasterModeId.cruise)
                    system.print("Elevator Activated")
                end
        
        actionStart:
            args: [option9]
            lua: |
                -- Print Current Location To LUA chat
                system.print("Current position: "..tostring(vec3(core.getConstructWorldPos())))

        actionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end

        actionStart:
            args: [light]
            lua: |
                if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
                    Nav.control.switchOffHeadlights()
                else
                    Nav.control.switchOnHeadlights()
                end

        actionStart:
            args: [forward]
            lua: pitchInput = pitchInput - 1
        actionStop:
            args: [forward]
            lua: pitchInput = pitchInput + 1
        actionStart:
            args: [backward]
            lua: pitchInput = pitchInput + 1
        actionStop:
            args: [backward]
            lua: pitchInput = pitchInput - 1
        actionStart:
            args: [left]
            lua: rollInput = rollInput - 1
        actionStop:
            args: [left]
            lua: rollInput = rollInput + 1
        actionStart:
            args: [right]
            lua: rollInput = rollInput + 1
        actionStop:
            args: [right]
            lua: rollInput = rollInput - 1

        actionStart:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
        actionStop:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)

        actionStart:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
        actionStop:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)

        actionStart:
            args: [up]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                if elevatorModeIsActive then
                    nextPosition()
                elseif not upIsActive then
                    upIsActive = true
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
                end
        actionStop:
            args: [up]
            lua: |
                if upIsActive then
                    upIsActive = false
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                    Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
                end
        actionStart:
            args: [down]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                if elevatorModeIsActive then
                    prevPosition()
                elseif not downIsActive then
                    downIsActive = true
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
                end
        actionStop:
            args: [down]
            lua: |
                if downIsActive then
                    downIsActive = false
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                    Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
                end

        actionStart:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)

        actionLoop:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)


        actionStart:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)

        actionLoop:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)

        actionStart:
            args: [yawright]
            lua: yawInput = yawInput - 1
        actionStop:
            args: [yawright]
            lua: yawInput = yawInput + 1
        actionStart:
            args: [yawleft]
            lua: yawInput = yawInput + 1
        actionStop:
            args: [yawleft]
            lua: yawInput = yawInput - 1
        actionStart:
            args: [brake]
            lua: |
                brakeInput = brakeInput + 1
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        actionStop:
            args: [brake]
            lua: brakeInput = brakeInput - 1

        actionLoop:
            args: [brake]
            lua: |
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        actionStart:
            args: [booster]
            lua: Nav:toggleBoosters()
        actionStart:
            args: [stopengines]
            lua: Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
        actionStart:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
        actionLoop:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
        actionStart:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
        actionLoop:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)
        actionStart:
            args: [antigravity]
            lua: if antigrav ~= nil then antigrav.toggle() end
